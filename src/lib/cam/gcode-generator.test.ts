import { describe, it, expect } from 'vitest';
import { generateGCode } from './gcode-generator';
import type { ToolPath, Drawing } from '../../types';

describe('generateGCode', () => {
  const mockDrawing: Drawing = {
    shapes: [],
    bounds: { min: { x: 0, y: 0 }, max: { x: 100, y: 100 } },
    units: 'mm'
  };
  
  const mockPath: ToolPath = {
    id: 'path1',
    shapeId: 'shape1',
    points: [
      { x: 0, y: 0 },
      { x: 100, y: 0 },
      { x: 100, y: 100 },
      { x: 0, y: 100 },
      { x: 0, y: 0 }
    ],
    leadIn: [{ x: -5, y: 0 }, { x: 0, y: 0 }],
    leadOut: [{ x: 0, y: 0 }, { x: -5, y: 0 }],
    isRapid: false,
    parameters: {
      feedRate: 1000,
      pierceHeight: 3.8,
      pierceDelay: 0.5,
      cutHeight: 1.5,
      kerf: 1.5,
      leadInLength: 5,
      leadOutLength: 5
    }
  };
  
  it('should generate valid G-code header', () => {
    const gcode = generateGCode([mockPath], mockDrawing, {
      units: 'mm',
      safeZ: 10,
      rapidFeedRate: 5000,
      includeComments: true,
      plasmaMode: true
    });
    
    expect(gcode).toContain('G21'); // Metric units
    expect(gcode).toContain('G90'); // Absolute positioning
    expect(gcode).toContain('G64'); // Path blending for plasma
  });
  
  it('should generate plasma-specific commands', () => {
    const gcode = generateGCode([mockPath], mockDrawing, {
      units: 'mm',
      safeZ: 10,
      rapidFeedRate: 5000,
      includeComments: true,
      plasmaMode: true
    });
    
    expect(gcode).toContain('M3'); // Plasma on
    expect(gcode).toContain('M5'); // Plasma off
    expect(gcode).toContain('G4'); // Pierce delay
  });
  
  it('should include comments when requested', () => {
    const gcode = generateGCode([mockPath], mockDrawing, {
      units: 'mm',
      safeZ: 10,
      rapidFeedRate: 5000,
      includeComments: true,
      plasmaMode: true
    });
    
    expect(gcode).toContain('(Generated by CAM-OCCT for LinuxCNC QtPlasmaC)');
    expect(gcode).toContain('(Path 1)');
  });
  
  it('should not include comments when not requested', () => {
    const gcode = generateGCode([mockPath], mockDrawing, {
      units: 'mm',
      safeZ: 10,
      rapidFeedRate: 5000,
      includeComments: false,
      plasmaMode: true
    });
    
    expect(gcode).not.toContain('(Generated by CAM-OCCT for LinuxCNC QtPlasmaC)');
  });
  
  it('should handle imperial units', () => {
    const gcode = generateGCode([mockPath], mockDrawing, {
      units: 'inch',
      safeZ: 0.5,
      rapidFeedRate: 200,
      includeComments: true,
      plasmaMode: true
    });
    
    expect(gcode).toContain('G20'); // Imperial units
  });
});